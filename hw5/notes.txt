- n is the number of nodes (corresponding to the number of Random Variables)
- k is the number of possible values for each of the nodes

- node indices are 0 indexed

datastructures:

-

marginal_probability pseudocode:

    message_left = [k length]

    message_right = [k length]

    for i in range(1, x_i):
        if i == 1:
            message_left = self.calculate_unary_message(i)
        else:
            message_left = self._calculate_unary_message(i) *. message_left
        # ^ this is u_x -> f

        message_left = self.calculate_mu_to_x_message_left(i, message_left)
        # ^ this is u_f -> x

    for i in range(p.chain_length(), x_i):
        if i == p.chain_length():
            message_right = self.calculate_unary_message(i)
        else:
            message_right = self.calculate_unary_message(i)i) *. message_right

        message_right = self.calculate_mu_to_x_message_right(i, message_right)

    p = self.element_wise_multiply(message_left, message_right)

    m = calculate_unary_message(x_i)

    p = self.element_wise_multiply(m, p)

    p = self.normalize(p)

    return p


calculate_mu_to_x_message_left(self, node_index, previous_message)
    message = [k+1 length 0 vector]
    for i in range(1, k + 1):
        for j in range(1, k + 1):
            message[i] += potential(node_index, j, i) * previous_message[j]

calculate_mu_to_x_message_right(self, node_index, previous_message)
    message = [k+1 length 0 vector]
    for i in range(1, k + 1):
        for j in range(1, k + 1):
            message[i] += potential(node_index, i, j) * previous_message[j]

calculate_unary_message(self, node_index):
    message = [k+1 length 0 vector]
    for i in range(1, k + 1):
        message[i] = self._potentials(node_index, i)

normalize(self, vector):
    z = sum(vector)
    vector = [x / z for x in vector]
    return vector

def element_wise_multiply(self, vect1, vect2):
    return [a*b for a,b in zip(vect1, vect2)]

====================================================================================
MAX SUM NOTES


self._assignments

max_probability(self, x_i):

    message_left = [k length]

    message_right = [k length]

    for i in range(1, x_i):
        if i == 1:
            message_left = self.calculate_unary_message(i)
        else:
            message_left = self._calculate_unary_message(i) + message_left
        # ^ this is u_x -> f

        max_p = 0
        max_k = 0
        for j in range(1, k):
            if message_left[j] > max_p:
                max_p = message_left[j]
                max_k = j

        self._assignments[i] = max_k

        message_left = self.calculate_mu_to_x_message_left(i, message_left)
        # ^ this is u_f -> x

    for i in range(p.chain_length(), x_i):
        if i == p.chain_length():
            message_right = self.calculate_unary_message(i)
        else:
            message_right = self.calculate_unary_message(i) + message_right

        max_p = 0
        max_k = 0
        for j in range(1, k):
            if message_left[j] > max_p:
                max_p = message_left[j]
                max_k = j

        self._assignments[i] = max_k

        message_right = self.calculate_mu_to_x_message_right(i, message_right)

    m = calculate_unary_message(x_i)

    p = m + message_left + message_right

    p = p - log(Z)

    max_p = 0
    max_k = 0
    for j in range(1, k):
        if message_left[j] > max_p:
            max_p = message_left[j]
            max_k = j

    self._assignments[x_i] = max_k

    return p




calculate_mu_to_x_message_left(self, node_index, previous_message)
    message = [k+1 length 0 vector]
    for i in range(1, k + 1):
        max = 0.0
        for j in range(1, k + 1):
            p = math.log(potential(node_index, j, i)) + previous_message[j]
            if p > max:
                max = p
        message[i] = max

calculate_mu_to_x_message_right(self, node_index, previous_message)
    message = [k+1 length 0 vector]
    for i in range(1, k + 1):
        max = 0.0
        for j in range(1, k + 1):
            p = math.log(potential(node_index, i, j)) + previous_message[j]
            if p > max:
                max = p
        message[i] = max

calculate_unary_message(self, node_index):
    message = [k+1 length 0 vector]
    for i in range(1, k + 1):
        message[i] = math.log(self._potentials(node_index, i))



        x_1=1
        x_2=3
            x_3=3
        x_4=2
        x_5=2
        x_6=2
        x_7=1
        x_8=1
        x_9=3
        x_10=3
        x_11=1
        x_12=2
        x_13=1




        x_1=1
        x_2=3
            x_3=1
        x_4=2
        x_5=2
        x_6=2
        x_7=1
        x_8=1
        x_9=3
        x_10=3
        x_11=1
        x_12=2
        x_13=1


        x_1=1
        x_2=3
        x_3=1
        x_4=2
        x_5=2
        x_6=3
        x_7=3
        x_8=3
        x_9=3
        x_10=3
            x_11=2
        x_12=2
        x_13=1




